# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2022, Tigase, Inc
# This file is distributed under the same license as the TigaseDoc package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: TigaseDoc \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-04-12 13:49-0700\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../IoT_framework.rst:2
msgid "Tigase IoT Framework"
msgstr ""

#: ../../IoT_framework.rst:5
msgid "Overview"
msgstr ""

#: ../../IoT_framework.rst:10
msgid "Example project"
msgstr ""

#: ../../IoT_framework.rst:10
msgid "Figure 1. Example project"
msgstr ""

#: ../../IoT_framework.rst:12
msgid ""
"Tigase IoT Framework project is a composite project for more and more "
"popular idea of IoT enabled devices. It is based on Jaxmpp library and "
"Jaxmpp Bot Framework for providing XMPP connectivity between devices."
msgstr ""

#: ../../IoT_framework.rst:14
msgid "This project is modular and consist of following modules:"
msgstr ""

#: ../../IoT_framework.rst:17
msgid "**runtime**"
msgstr ""

#: ../../IoT_framework.rst:17
msgid ""
"Contains main classes of a framework. It is responsible for connectivity "
"and general functionalities."
msgstr ""

#: ../../IoT_framework.rst:20 ../../IoT_framework.rst:569
#: ../../IoT_framework.rst:618
msgid "**devices**"
msgstr ""

#: ../../IoT_framework.rst:20
msgid ""
"Provides API and base classes for implementations of sensors or executor "
"devices."
msgstr ""

#: ../../IoT_framework.rst:23
msgid "**devices-rpi**"
msgstr ""

#: ../../IoT_framework.rst:23
msgid ""
"Provides support for particular sensors or executors which are supported "
"on Raspberry Pi platform. It is responible for communication between "
"framework and actual devices connected to Raspberry Pi."
msgstr ""

#: ../../IoT_framework.rst:26
msgid "**client**"
msgstr ""

#: ../../IoT_framework.rst:26
msgid ""
"Web based UI for interaction with devices, including device management "
"task"
msgstr ""

#: ../../IoT_framework.rst:29
msgid "**client-library**"
msgstr ""

#: ../../IoT_framework.rst:29
msgid ""
"Library for interaction with application using Tigase IoT Framework "
"installed and running on a device using XMPP protocol with support for "
"GWT compilation. It provides classes used by UI."
msgstr ""

#: ../../IoT_framework.rst:32
msgid "Building"
msgstr ""

#: ../../IoT_framework.rst:35 ../../IoT_framework.rst:60
#: ../../IoT_framework.rst:662
msgid "Requirements"
msgstr ""

#: ../../IoT_framework.rst:37
msgid ""
"Tigase IoT Framework is based on the newest (not yet released) version of"
" JaXMPP Bot Framework. It will automatically download required "
"dependecies from Maven repository."
msgstr ""

#: ../../IoT_framework.rst:40
msgid "Building Framework"
msgstr ""

#: ../../IoT_framework.rst:42
msgid "Tigase IoT Framework binaries can be built with Gradle."
msgstr ""

#: ../../IoT_framework.rst:48
msgid ""
"This line will compile whole framework (including Raspberry Pi releated "
"stuff), install it to Gradle and Maven local repositories and create "
"simplest possible bundle of a framework with only most necessary "
"features. This bundle will be created in a directory "
"``runtime/build/distributions/``."
msgstr ""

#: ../../IoT_framework.rst:50
msgid ""
"Additionally it will create a WAR archive with Tigase IoT Web Client in a"
" directory ``client/build/libs/``. File will be named ``iot-"
"client-2.0.0-SNAPSHOT.war``."
msgstr ""

#: ../../IoT_framework.rst:54
msgid ""
"If you want want to start Tigase IoT Web Client locally without deploying"
" it to a web server you may start it with ``./gradlew gwtDev`` which will"
" start it using GWT development mode."
msgstr ""

#: ../../IoT_framework.rst:57
msgid "Running"
msgstr ""

#: ../../IoT_framework.rst:62
msgid ""
"Tigase IoT Framework requires Tigase IoT Hub to be installed and running "
"in the same network as Tigase IoT Framework. IoT Framework may be started"
" before IoT Hub but it will not be operational as for configuration and "
"management IoT Hub is required. For details about Tigase IoT Hub "
"installation and configuration please check Tigase IoT Hub documentation."
msgstr ""

#: ../../IoT_framework.rst:65
msgid "Running framework"
msgstr ""

#: ../../IoT_framework.rst:67
msgid ""
"Unpack the distribution zip file you created during the build process, "
"then navigate to the directory where it is unpacked. Now we may run the "
"bot."
msgstr ""

#: ../../IoT_framework.rst:77
msgid ""
"INFO: At this point you need to have a running Tigase IoT Hub connected "
"to the same network."
msgstr ""

#: ../../IoT_framework.rst:79
msgid ""
"Tigase IoT Framework runtime understands some variables that can control "
"it, they may be displayed using the --help switch."
msgstr ""

#: ../../IoT_framework.rst:92
msgid ""
"Configuration of the bot framework will be store in config file, what is "
"DSL file, at ``etc/config.tdsl``. There is no need to manually edit this "
"file or prepare configuration, as IoT Framework will find local Tigase "
"IoT Hub and automatically register in it and generate configuration for "
"later usage."
msgstr ""

#: ../../IoT_framework.rst:95
msgid "Running Web UI"
msgstr ""

#: ../../IoT_framework.rst:97
msgid ""
"Package created during build of Web UI may be deployed to any Java based "
"HTTP server (like ie. Tomcat) or it is possible to unzip content of this "
"archive to any subdirectory and point web server like Apache or NGINX to "
"this directory for serving data."
msgstr ""

#: ../../IoT_framework.rst:99
msgid ""
"It is also possible to start Web UI without any web server by running "
"following command:"
msgstr ""

#: ../../IoT_framework.rst:105
msgid "This will start web UI using GWT SuperDevMode."
msgstr ""

#: ../../IoT_framework.rst:109
msgid ""
"It is required to build base part of a project with Gradle before "
"building Web UI with Maven."
msgstr ""

#: ../../IoT_framework.rst:113
msgid ""
"It is best to have Web UI deployed on same server which hosts Tigase XMPP"
" Server (HUB)."
msgstr ""

#: ../../IoT_framework.rst:116
msgid "Installation"
msgstr ""

#: ../../IoT_framework.rst:118
msgid ""
"Tigase IoT Framework distribution package comes with startup scripts for "
"``systemd``. To use them please follow this steps to install Tigase IoT "
"Framework and ``systemd`` startup scripts."
msgstr ""

#: ../../IoT_framework.rst:121
msgid "Create user and adjust permissions"
msgstr ""

#: ../../IoT_framework.rst:123
msgid ""
"As the first step we need to create user with which permissions IoT "
"framework will be running"
msgstr ""

#: ../../IoT_framework.rst:129
msgid ""
"If you are installing Tigase IoT Framework on Raspberry PI and want to "
"use GPIO, SPI or I2C connected devices then we need to add newly created "
"user to proper groups"
msgstr ""

#: ../../IoT_framework.rst:136 ../../IoT_framework.rst:220
msgid "Switching working directory"
msgstr ""

#: ../../IoT_framework.rst:138 ../../IoT_framework.rst:222
msgid ""
"For next steps we need to switch working directory to home directory of "
"user ``tigase``"
msgstr ""

#: ../../IoT_framework.rst:145 ../../IoT_framework.rst:237
msgid "Download distribution package"
msgstr ""

#: ../../IoT_framework.rst:149 ../../IoT_framework.rst:241
msgid "We assume that you have ``wget`` utility installed."
msgstr ""

#: ../../IoT_framework.rst:151 ../../IoT_framework.rst:243
msgid ""
"We are going to change working directory to ``tigase`` user home path and"
" download newest version of Tigase IoT Framework:"
msgstr ""

#: ../../IoT_framework.rst:158 ../../IoT_framework.rst:250
msgid "Unpacking distribution package"
msgstr ""

#: ../../IoT_framework.rst:160 ../../IoT_framework.rst:252
msgid ""
"To unpack distribution package and create symlink for easier access we "
"are executing following commands:"
msgstr ""

#: ../../IoT_framework.rst:169 ../../IoT_framework.rst:267
msgid ""
"We assumed that ``tigase-iot-framework-2.0.0-SNAPSHOT-b62`` is name of "
"the directory unpacked from ``tigase-iot-framework.zip``."
msgstr ""

#: ../../IoT_framework.rst:172
msgid "Installation of startup scripts"
msgstr ""

#: ../../IoT_framework.rst:182
msgid "Enabling Tigase IoT Framework"
msgstr ""

#: ../../IoT_framework.rst:189 ../../IoT_framework.rst:295
msgid "Summary"
msgstr ""

#: ../../IoT_framework.rst:191
msgid ""
"At this point we have Tigase IoT Framework installed and configured to "
"start after restart. From now on we can:"
msgstr ""

#: ../../IoT_framework.rst:194
msgid "Start framework"
msgstr ""

#: ../../IoT_framework.rst:201
msgid "Stop framework"
msgstr ""

#: ../../IoT_framework.rst:208
msgid "Check status of the framework"
msgstr ""

#: ../../IoT_framework.rst:215
msgid "Upgrade"
msgstr ""

#: ../../IoT_framework.rst:217
msgid ""
"You can easily upgrade Tigase IoT Framework to the new version following "
"this steps."
msgstr ""

#: ../../IoT_framework.rst:229
msgid "Stopping old installation"
msgstr ""

#: ../../IoT_framework.rst:259
msgid "Copy configuration"
msgstr ""

#: ../../IoT_framework.rst:270
msgid "Replace old installation"
msgstr ""

#: ../../IoT_framework.rst:278
msgid "Updating startup scripts"
msgstr ""

#: ../../IoT_framework.rst:288
msgid "Starting Tigase IoT Framework"
msgstr ""

#: ../../IoT_framework.rst:297
msgid "At this point we have Tigase IoT Framework upgraded and running."
msgstr ""

#: ../../IoT_framework.rst:301
msgid ""
"If everything works ok, you may safely delete old installation directory "
"of Tigase IoT Framework."
msgstr ""

#: ../../IoT_framework.rst:304
msgid "Development"
msgstr ""

#: ../../IoT_framework.rst:306
msgid ""
"Tigase IoT Framework is an extended version of `Jaxmpp Bot Framework "
"<https://projects.tigase.org/projects/jaxmpp-bot-framework>`__ which "
"allows you to take all benefits and use all features provided by Jaxmpp "
"Bot Framework, such as usage of Tigase Kernel as IoC container and so on."
msgstr ""

#: ../../IoT_framework.rst:310
msgid ""
"For more detailed information about usage of Jaxmpp Bot Framework please "
"look into documentation of Jaxmpp Bot Framework."
msgstr ""

#: ../../IoT_framework.rst:312
msgid "*Values*"
msgstr ""

#: ../../IoT_framework.rst:314
msgid ""
"By default Tigase IoT Framework requires you to wrap value read from "
"sensor in a class implementing ``tigase.iot.framework.devices.IValue``. "
"This requirement was introduces to bond together timestamp (marking time "
"when value was initially read) with a value and allows you to add "
"additional informations as well, ie. temperature can be passed with "
"correct scale, etc."
msgstr ""

#: ../../IoT_framework.rst:316
msgid ""
"Currently we provided following implementations for storing following "
"values:"
msgstr ""

#: ../../IoT_framework.rst:318
msgid "temperature - ``tigase.iot.framework.values.Temperature``"
msgstr ""

#: ../../IoT_framework.rst:320
msgid "light - ``tigase.iot.framework.values.Light``"
msgstr ""

#: ../../IoT_framework.rst:322
msgid "movement - ``tigase.iot.framework.values.Movement``"
msgstr ""

#: ../../IoT_framework.rst:324
msgid ""
"For this classes we provide you with proper serializers and parsers used "
"for transferring this values over XMPP protocol."
msgstr ""

#: ../../IoT_framework.rst:328
msgid ""
"If you decide to add a new class then you will need to implement and "
"provide Tigase IoT Framework with new parser and serializer (a bean "
"extending ``AbstractValueFormatter`` with a support for your newly "
"created implementation of ``IValue`` interface)."
msgstr ""

#: ../../IoT_framework.rst:332
msgid ""
"Additionally you will need to provide proper support for parsing this "
"data in client library as in other case data from your sensor will not be"
" available in UI."
msgstr ""

#: ../../IoT_framework.rst:334
msgid "*Device types*"
msgstr ""

#: ../../IoT_framework.rst:336
msgid ""
"In our framework device type is just a string to make it easy to extend "
"it by adding new device/sensor types. Currently we provide devices with "
"following device types and only this device types are supported by UI:"
msgstr ""

#: ../../IoT_framework.rst:338
msgid "movement-sensor"
msgstr ""

#: ../../IoT_framework.rst:340
msgid "tv-sensor"
msgstr ""

#: ../../IoT_framework.rst:342
msgid "light-dimmer"
msgstr ""

#: ../../IoT_framework.rst:344
msgid "light-sensor"
msgstr ""

#: ../../IoT_framework.rst:346
msgid "temperature-sensor"
msgstr ""

#: ../../IoT_framework.rst:348
msgid ""
"To add support for a new device type, you need to override "
"``createDevice()`` method of ``Devices`` classes from ``client-library`` "
"module and add there support for new device type. This will add support "
"for a new device type in a client model layer. Additionally you need to "
"add support for this new device inside ``DevicesListViewImpl`` to add "
"support in a presentation layer."
msgstr ""

#: ../../IoT_framework.rst:352
msgid ""
"This separation on a client side is create for a reason. It is done in "
"such a way to make presentation layer separate from model layer and allow"
" reuse of a model layer in other clients with different presentation "
"layer."
msgstr ""

#: ../../IoT_framework.rst:355
msgid "New sensor"
msgstr ""

#: ../../IoT_framework.rst:357
msgid ""
"To add support for new a new sensor it is required to create a class "
"which bases on ``tigase.iot.framework.devices.AbstractSensor``. This "
"simple base class will take over of all required tasks and provide you "
"with access to configuration and event bus."
msgstr ""

#: ../../IoT_framework.rst:359
msgid ""
"Next you need to implement support for reading data/value from your "
"sensor. When you have received new value, then wrap it in `instance of "
"class implementing interface ``tigase.iot.framework.devices.IValue`` "
"<#ivalue>`__ and call ``updateValue()`` method from your class extending "
"``AbstractSensor``. This method will then fire event with new value which"
" will be delivered to every device which will be listening to state "
"changes of your sensor."
msgstr ""

#: ../../IoT_framework.rst:361
msgid ""
"Constructor of an ``AbstractSensor`` class requires in a parameter a type"
" of a device - string value. This value is later on published in "
"configuration of a device and used by UI to detect device type and use "
"proper controls to display sensor and it’s state. Currently there is only"
" a support for a few `device types <#device-types>`__."
msgstr ""

#: ../../IoT_framework.rst:365 ../../IoT_framework.rst:381
msgid ""
"After you have your class implemented, you need to compile it and add to "
"classpath of Tigase IoT Framework project and add it to configuration as "
"a ``@Bean``"
msgstr ""

#: ../../IoT_framework.rst:367
msgid "**Example (support for a PIR sensor - HC SR501).**"
msgstr ""

#: ../../IoT_framework.rst:373
msgid "New sensor with periodical reads"
msgstr ""

#: ../../IoT_framework.rst:375
msgid ""
"If you want to create a support for a sensor which requires reads from "
"actual sensor from time to time, then you should create class extending "
"``tigase.iot.framework.devices.AbstractPeriodSensor``. This class will "
"allow you to specify how often to read data from a sensor and implement "
"actual read from a sensor inside ``<T extends IValue> T readValue()`` "
"method. Inside this method you will also need to wrap value you read in "
"`instance of a class implementing ``tigase.iot.framework.devices.IValue``"
" <#ivalue>`__"
msgstr ""

#: ../../IoT_framework.rst:377
msgid ""
"Constructor of an ``AbstractSensor`` class requires in a parameter a type"
" of a device - string value, and default period in which data from sensor"
" will be read. Device type is later on published in configuration of a "
"device and used by UI to detect device type and use proper controls to "
"display sensor and it’s state. Currently there is only a support for a "
"few `device types <#device-types>`__."
msgstr ""

#: ../../IoT_framework.rst:385
msgid ""
"You may not use ``AbstractPeriodSensor`` as your direct base class. We "
"provide you with other classes like ``I2CAbstractPeriodDevice`` or "
"``W1AbstractPeriodDevice``. They all are based on "
"``AbstractPeriodSensor`` and provide same functionality but allow you to "
"access I2C, 1Wire easier."
msgstr ""

#: ../../IoT_framework.rst:389
msgid ""
"Usage of ``W1AbstractPeriodDevice`` is tricky. To use it you need to use "
"``W1Master`` bean, enable it and register your implementation within "
"``W1Master`` providing it with key - implementation of "
"``com.pi4j.io.w1.W1DeviceType``. Classes "
"``tigase.iot.framework.rpi.sensors.w1.DS1820`` and "
"``tigase.iot.framework.rpi.sensors.w1.DS1820DeviceType`` are good "
"examples of how to do this."
msgstr ""

#: ../../IoT_framework.rst:391
msgid "**Example (support for I2C sensor - BH1750).**"
msgstr ""

#: ../../IoT_framework.rst:396
msgid "New device"
msgstr ""

#: ../../IoT_framework.rst:398
msgid ""
"Not all devices are sensors. In typical use case you will have many "
"devices providing some state by measuring data using external sensors and"
" we call them here sensors. However very often you will have some devices"
" which need to react on changed state of other devices or react on user "
"action - this we call executor devices."
msgstr ""

#: ../../IoT_framework.rst:400
msgid ""
"To implement a new executor device you need to create a new "
"implementation of a sensor (executor device is a sensor as well as it "
"reports it current state), which also implements ``IExecutorDevice`` "
"inteface:"
msgstr ""

#: ../../IoT_framework.rst:412
msgid "In typical usage ``T`` should implement ``IValue`` interface."
msgstr ""

#: ../../IoT_framework.rst:414
msgid ""
"This method will be automatically called if new state will be published "
"for this device (new state will be published on a device state node)."
msgstr ""

#: ../../IoT_framework.rst:416
msgid ""
"If your device requires to listen to states published by other sensors "
"then it needs to implement ``NodesObserver`` with method "
"``getObserverdNodes()`` which needs to return list of state node in which"
" your device is interrested in. Additionally you will have to implement "
"following method:"
msgstr ""

#: ../../IoT_framework.rst:424
msgid ""
"It will be called whenever new state/value will be published by any "
"sensor or a device. You need to check ``source`` variable of a "
"``ValueChangedEvent`` to look for a node of a device in which state you "
"are interested in. In ``value`` variable of a ``ValueChangedEvent`` you "
"will find newly published device state which node you will find in "
"``source`` variable."
msgstr ""

#: ../../IoT_framework.rst:427
msgid "Quickstart"
msgstr ""

#: ../../IoT_framework.rst:429
msgid ""
"Tigase IoT Framework provides you with examples for creating support for "
"a new devices in Java and Python. At https://tigase.tech/projects/tigase-"
"iot-framework-examples/ you will find a project with examples which will "
"help you get started with adding support for a new device. All you need "
"to do is:"
msgstr ""

#: ../../IoT_framework.rst:432
msgid "Clone a repository containing examples"
msgstr ""

#: ../../IoT_framework.rst:439
msgid "Choose a language of your choice"
msgstr ""

#: ../../IoT_framework.rst:441
msgid ""
"We provide support for Java and Python, so you may write code for "
"communication in Java or Python and only do some basic mapping in Java to"
" expose your driver to the IoT Framework."
msgstr ""

#: ../../IoT_framework.rst:445
msgid "Open project with examples for the language which you selected"
msgstr ""

#: ../../IoT_framework.rst:447
msgid ""
"You may edit source codes of the project in any text editor you want. But"
" we would suggest usage of some IDE with support for Java and Gradle."
msgstr ""

#: ../../IoT_framework.rst:451
msgid "Modify example drivers"
msgstr ""

#: ../../IoT_framework.rst:453
msgid ""
"At this point, you may select proper template and fill it with your code "
"for communicating with the sensor."
msgstr ""

#: ../../IoT_framework.rst:457
msgid "Run your code"
msgstr ""

#: ../../IoT_framework.rst:459
msgid ""
"To make it easier, our example projects contain gradle ``run`` task, so "
"you can start IoT framework with your driver with just one command:"
msgstr ""

#: ../../IoT_framework.rst:465
msgid ""
"This command will start Tigase IoT Framework (new instance) and will try "
"to connect to the IoT hub. All configuration of this instances will be "
"stored in ``etc/config.tdsl`` file in your examples project directory."
msgstr ""

#: ../../IoT_framework.rst:468
msgid "Package your driver"
msgstr ""

#: ../../IoT_framework.rst:470
msgid "When you are done, you may run"
msgstr ""

#: ../../IoT_framework.rst:476
msgid ""
"which will create a jar file which you may add to your existing Tigase "
"IoT Framework installation."
msgstr ""

#: ../../IoT_framework.rst:480
msgid ""
"Jar file will be located at ``build/libs`` directory in your examples "
"project directory."
msgstr ""

#: ../../IoT_framework.rst:484
msgid "Creating new project using Tigase IoT Framework"
msgstr ""

#: ../../IoT_framework.rst:487
msgid "Creating project"
msgstr ""

#: ../../IoT_framework.rst:489
msgid ""
"If you would like to create new project using Tigase IoT Framework, then "
"simplest solution will be to create new project using Gradle with "
"following entries in @build.gradle@ file:"
msgstr ""

#: ../../IoT_framework.rst:491
msgid "**Example project file for Gradle.**"
msgstr ""

#: ../../IoT_framework.rst:524
msgid ""
"Now you can focus on implementation of support for devices as described "
"in other parts of this section."
msgstr ""

#: ../../IoT_framework.rst:527
msgid "Configuration of a project"
msgstr ""

#: ../../IoT_framework.rst:529
msgid ""
"If classes containing implementations for your sensors are packaged and "
"available in Tigase IoT Framework class path, then Tigase IoT Framework "
"will load them and allow you to create new devices using drivers which "
"you provided."
msgstr ""

#: ../../IoT_framework.rst:532
msgid "Building project"
msgstr ""

#: ../../IoT_framework.rst:534
msgid ""
"Use of following command will build you project and package it to single "
"zip archive with all dependencies and default configuration for easy "
"deployment."
msgstr ""

#: ../../IoT_framework.rst:541
msgid "Running project"
msgstr ""

#: ../../IoT_framework.rst:543
msgid ""
"To run this project on a device (ie. Raspberry Pi), copy distribution "
"package to a device and unzip archive. Inside in ``bin`` directory there "
"are project startup files named same as your project name, ie. ``test-"
"project``"
msgstr ""

#: ../../IoT_framework.rst:545
msgid ""
"After running following command, project will start and try to connect to"
" XMPP server as defined in project configuration file."
msgstr ""

#: ../../IoT_framework.rst:553
msgid ""
"It is possible to pass additional options or configuration options during"
" startup. For a detailed description of this options please look into "
"`section describing running <#running>`__ of Tigase IoT Framework."
msgstr ""

#: ../../IoT_framework.rst:557
msgid ""
"If your project adds new type of sensors or new types of data then you "
"will need to extend client and client-library modules to add support for "
"them before you will be able to see this new device in a UI."
msgstr ""

#: ../../IoT_framework.rst:559
msgid ""
"In our design IoT devices are connecting to Tigase IoT Hub acting as a "
"central hub for all IoT devices. For communication IoT devices uses "
"PubSub component deployed on XMPP server which acts as a message broker."
msgstr ""

#: ../../IoT_framework.rst:562
msgid "Initialization"
msgstr ""

#: ../../IoT_framework.rst:564
msgid ""
"After connection application creates PubSub nodes for every device or "
"sensor connected to RPi and registered in application. Node name is "
"always generated in following form: ``devices/iot-device-id``, where "
"``iot-device-id`` is ID of a IoT device connected to RPi. This node is "
"created with type ``collection``. This newly created node is always a "
"subnode of root PubSub node used by IoT devices named ``devices``."
msgstr ""

#: ../../IoT_framework.rst:566
msgid ""
"As a result for devices with id’s ``iot-1``, ``iot-2`` and ``iot-3`` at "
"this point we have following nodes created:"
msgstr ""

#: ../../IoT_framework.rst:569 ../../IoT_framework.rst:591
msgid "Root node *(collection)*"
msgstr ""

#: ../../IoT_framework.rst:572 ../../IoT_framework.rst:600
msgid "**devices/iot-1**"
msgstr ""

#: ../../IoT_framework.rst:572 ../../IoT_framework.rst:594
msgid "Contains data related to iot-1 device *(collection)*"
msgstr ""

#: ../../IoT_framework.rst:575 ../../IoT_framework.rst:609
msgid "**devices/iot-2**"
msgstr ""

#: ../../IoT_framework.rst:575 ../../IoT_framework.rst:603
msgid "Contains data related to iot-2 device *(collection)*"
msgstr ""

#: ../../IoT_framework.rst:578 ../../IoT_framework.rst:618
msgid "**devices/iot-3**"
msgstr ""

#: ../../IoT_framework.rst:578 ../../IoT_framework.rst:612
msgid "Contains data related to iot-3 device *(collection)*"
msgstr ""

#: ../../IoT_framework.rst:580
msgid ""
"After this is completed then for every device framework creates 2 leaf "
"subnodes for every device:"
msgstr ""

#: ../../IoT_framework.rst:583
msgid "**config**"
msgstr ""

#: ../../IoT_framework.rst:583
msgid ""
"Contains configuration of a device (including information about device "
"type, options, etc.)"
msgstr ""

#: ../../IoT_framework.rst:586
msgid "**state**"
msgstr ""

#: ../../IoT_framework.rst:586
msgid ""
"Contains current state of a device (and previous states depending on "
"configuration)"
msgstr ""

#: ../../IoT_framework.rst:588
msgid "So for a device listed about we will get following nodes:"
msgstr ""

#: ../../IoT_framework.rst:597
msgid "**devices/iot-1/state**"
msgstr ""

#: ../../IoT_framework.rst:597
msgid "Current state of iot-1 device"
msgstr ""

#: ../../IoT_framework.rst:600
msgid "**devices/iot-1/config**"
msgstr ""

#: ../../IoT_framework.rst:600
msgid "Configuration of iot-1 device"
msgstr ""

#: ../../IoT_framework.rst:606
msgid "**devices/iot-2/state**"
msgstr ""

#: ../../IoT_framework.rst:606
msgid "Current state of iot-2 device"
msgstr ""

#: ../../IoT_framework.rst:609
msgid "**devices/iot-2/config**"
msgstr ""

#: ../../IoT_framework.rst:609
msgid "Configuration of iot-2 device"
msgstr ""

#: ../../IoT_framework.rst:615
msgid "**devices/iot-3/state**"
msgstr ""

#: ../../IoT_framework.rst:615
msgid "Current state of iot-3 device"
msgstr ""

#: ../../IoT_framework.rst:618
msgid "**devices/iot-3/config**"
msgstr ""

#: ../../IoT_framework.rst:618
msgid "Configuration of iot-3 device"
msgstr ""

#: ../../IoT_framework.rst:620
msgid "At this point application is ready for work."
msgstr ""

#: ../../IoT_framework.rst:623
msgid "Publishing data from sensors"
msgstr ""

#: ../../IoT_framework.rst:625
msgid ""
"When a sensor changes it’s state it emits event informing application "
"that it’s state has changed. When application receives this information "
"it serializes it to format similar to format used in `XEP-0323: Internet "
"of Things - Sensor Data "
"<http://www.xmpp.org/extensions/xep-0323.html:>`__ for data "
"representation and publishes this data as a payload to device’s state "
"PubSub node, ie. for ``iot-1`` measuring light intensity in ``lm`` "
"following payload will be published at ``devices/iot-1/state``:"
msgstr ""

#: ../../IoT_framework.rst:634
msgid "Reacting on change of sensor state"
msgstr ""

#: ../../IoT_framework.rst:636
msgid ""
"Executor devices need to listen to changes of state of sensor devices and"
" adjust state. To do so, executor device reports to application which "
"sensors it want’s to observe and application automatically subscribes to "
"particular nodes. After that every change of state published to nodes "
"observer by device will be received from PubSub component by application,"
" which will decode it from XML payload and will fire event which will be "
"forwarded to executor device. This event will contain important "
"information related to this change, like timestamp, value, unit, etc."
msgstr ""

#: ../../IoT_framework.rst:639
msgid "Publishing data to device"
msgstr ""

#: ../../IoT_framework.rst:641
msgid ""
"It is possible to publish value to a device, which allows you to change "
"state of an executor device, ie. publish data forcing light to be turned "
"on. Our framework will automatically detect this change of published "
"state and forward it to executor device resulting in light being turned "
"on."
msgstr ""

#: ../../IoT_framework.rst:644 ../../IoT_framework.rst:681
msgid "Configuration"
msgstr ""

#: ../../IoT_framework.rst:646
msgid ""
"Usually devices keep configuration on device itself. In our design only "
"initial configuration is stored on device, which means that there is no "
"need to locally store additional data between restart of a device."
msgstr ""

#: ../../IoT_framework.rst:648
msgid ""
"For configuration storage we use ``config`` PubSub node of a particular "
"device. This way a change to a configuration of device, new configuration"
" needs to be published on device configuration node. Updated "
"configuration will be automatically retrieved by application and applied "
"to particular device without restart of an application."
msgstr ""

#: ../../IoT_framework.rst:650
msgid ""
"We decided to keep in configuration all important information, ie. list "
"of nodes device observes, etc. Due to that it is possible to retrieve "
"device configuration in a web based client and change it, ie. to change "
"sensor from which temperature is retrieved to adjust temperature in a "
"room."
msgstr ""

#: ../../IoT_framework.rst:652
msgid ""
"Configuration in stored in form of a `XEP-0004: Data Forms "
"<http://xmpp.org/extensions/xep-0004.html:>`__, which makes it flexible "
"and expandable."
msgstr ""

#: ../../IoT_framework.rst:655
msgid "User Interface"
msgstr ""

#: ../../IoT_framework.rst:657
msgid ""
"For user interface we decided to use web based application due to fact "
"that using using web page you can manage your IoT devices from a "
"computer, mobile phone, tablet or smart tv."
msgstr ""

#: ../../IoT_framework.rst:659
msgid ""
"It is very simple to retrieve list of devices as every subnode of a "
"``devices`` node represents device. Retrieving ``config`` node of that "
"node allows us you easily to retrieve device type and current "
"configuration, while using device type and data retrieved from ``state`` "
"node allows to easily retrieve and observe state of a sensor or a device."
msgstr ""

#: ../../IoT_framework.rst:664
msgid "There are a few requirement to use this project:"
msgstr ""

#: ../../IoT_framework.rst:667
msgid "Device running IoT-XMPP bridge  [1]_ - Raspberry Pi"
msgstr ""

#: ../../IoT_framework.rst:669
msgid ""
"During our work we were using Raspbbery Pi 3 as a development device (due"
" to already working and built-in WiFi), however project should work with "
"any Raspberry Pi version."
msgstr ""

#: ../../IoT_framework.rst:673
msgid ""
"It is possible to use this project with other devices than Raspberry Pi "
"as only ``devices`` module requires Raspbbery Pi to communicate with "
"executor devices and sensors. You can provide your support for other "
"platforms by providing alternative implementations of drivers."
msgstr ""

#: ../../IoT_framework.rst:676
msgid "Tigase IoT Hub"
msgstr ""

#: ../../IoT_framework.rst:678
msgid ""
"It is required to use `Tigase IoT Hub <http://tigase.tech/projects/iot-"
"xmpp-hub/>`__. We recommend usage of the newest available version. Tigase"
" IoT Hub is a modified version of Tigase XMPP Server with PubSub "
"component which has ready to use configuration and many improvements "
"making usage of IoT Hub and this framework a lot easier."
msgstr ""

#: ../../IoT_framework.rst:683
msgid ""
"Configuration of Tigase IoT Hub is stored in ``etc/config.tdsl`` file in "
"DSL format and ready to use. You should not need to make any changes "
"there."
msgstr ""

#: ../../IoT_framework.rst:685
msgid ""
"However it is possible and configuration of Tigase XMPP Server is "
"described in `Tigase XMPP Server Administation Guide "
"<http://docs.tigase.org/>`__."
msgstr ""

#: ../../IoT_framework.rst:689
msgid "Network"
msgstr ""

#: ../../IoT_framework.rst:691
msgid ""
"A properly set up network on a Raspbbery Pi device with working "
"connectivity to Tigase IoT Hub is required. Tigase IoT Hub and Tigase IoT"
" Framework need to be connected to the same network."
msgstr ""

#: ../../IoT_framework.rst:694
msgid ""
"Application which is based on Tigase IoT Framework and connects (creates "
"bridge) IoT unaware sensors and allows them to access XMPP network"
msgstr ""

